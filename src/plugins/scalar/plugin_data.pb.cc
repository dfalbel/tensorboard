// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: plugins/scalar/plugin_data.proto

#include "plugins/scalar/plugin_data.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace tensorboard {
constexpr ScalarPluginData::ScalarPluginData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : version_(0){}
struct ScalarPluginDataDefaultTypeInternal {
  constexpr ScalarPluginDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ScalarPluginDataDefaultTypeInternal() {}
  union {
    ScalarPluginData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ScalarPluginDataDefaultTypeInternal _ScalarPluginData_default_instance_;
}  // namespace tensorboard
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_plugins_2fscalar_2fplugin_5fdata_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_plugins_2fscalar_2fplugin_5fdata_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_plugins_2fscalar_2fplugin_5fdata_2eproto = nullptr;

const uint32_t TableStruct_plugins_2fscalar_2fplugin_5fdata_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorboard::ScalarPluginData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorboard::ScalarPluginData, version_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tensorboard::ScalarPluginData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorboard::_ScalarPluginData_default_instance_),
};

const char descriptor_table_protodef_plugins_2fscalar_2fplugin_5fdata_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n plugins/scalar/plugin_data.proto\022\013tens"
  "orboard\"#\n\020ScalarPluginData\022\017\n\007version\030\001"
  " \001(\005b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_plugins_2fscalar_2fplugin_5fdata_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_plugins_2fscalar_2fplugin_5fdata_2eproto = {
  false, false, 92, descriptor_table_protodef_plugins_2fscalar_2fplugin_5fdata_2eproto, "plugins/scalar/plugin_data.proto", 
  &descriptor_table_plugins_2fscalar_2fplugin_5fdata_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_plugins_2fscalar_2fplugin_5fdata_2eproto::offsets,
  file_level_metadata_plugins_2fscalar_2fplugin_5fdata_2eproto, file_level_enum_descriptors_plugins_2fscalar_2fplugin_5fdata_2eproto, file_level_service_descriptors_plugins_2fscalar_2fplugin_5fdata_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_plugins_2fscalar_2fplugin_5fdata_2eproto_getter() {
  return &descriptor_table_plugins_2fscalar_2fplugin_5fdata_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_plugins_2fscalar_2fplugin_5fdata_2eproto(&descriptor_table_plugins_2fscalar_2fplugin_5fdata_2eproto);
namespace tensorboard {

// ===================================================================

class ScalarPluginData::_Internal {
 public:
};

ScalarPluginData::ScalarPluginData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tensorboard.ScalarPluginData)
}
ScalarPluginData::ScalarPluginData(const ScalarPluginData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:tensorboard.ScalarPluginData)
}

inline void ScalarPluginData::SharedCtor() {
version_ = 0;
}

ScalarPluginData::~ScalarPluginData() {
  // @@protoc_insertion_point(destructor:tensorboard.ScalarPluginData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ScalarPluginData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ScalarPluginData::ArenaDtor(void* object) {
  ScalarPluginData* _this = reinterpret_cast< ScalarPluginData* >(object);
  (void)_this;
}
void ScalarPluginData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarPluginData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ScalarPluginData::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorboard.ScalarPluginData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  version_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarPluginData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 version = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ScalarPluginData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorboard.ScalarPluginData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 version = 1;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorboard.ScalarPluginData)
  return target;
}

size_t ScalarPluginData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorboard.ScalarPluginData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 version = 1;
  if (this->_internal_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ScalarPluginData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ScalarPluginData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ScalarPluginData::GetClassData() const { return &_class_data_; }

void ScalarPluginData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ScalarPluginData *>(to)->MergeFrom(
      static_cast<const ScalarPluginData &>(from));
}


void ScalarPluginData::MergeFrom(const ScalarPluginData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorboard.ScalarPluginData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_version() != 0) {
    _internal_set_version(from._internal_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ScalarPluginData::CopyFrom(const ScalarPluginData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorboard.ScalarPluginData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarPluginData::IsInitialized() const {
  return true;
}

void ScalarPluginData::InternalSwap(ScalarPluginData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(version_, other->version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarPluginData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_plugins_2fscalar_2fplugin_5fdata_2eproto_getter, &descriptor_table_plugins_2fscalar_2fplugin_5fdata_2eproto_once,
      file_level_metadata_plugins_2fscalar_2fplugin_5fdata_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorboard
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorboard::ScalarPluginData* Arena::CreateMaybeMessage< ::tensorboard::ScalarPluginData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorboard::ScalarPluginData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
