// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: summary.proto

#include "summary.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace tensorboard {
constexpr SummaryDescription::SummaryDescription(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_hint_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SummaryDescriptionDefaultTypeInternal {
  constexpr SummaryDescriptionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SummaryDescriptionDefaultTypeInternal() {}
  union {
    SummaryDescription _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SummaryDescriptionDefaultTypeInternal _SummaryDescription_default_instance_;
constexpr HistogramProto::HistogramProto(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bucket_limit_()
  , bucket_()
  , min_(0)
  , max_(0)
  , num_(0)
  , sum_(0)
  , sum_squares_(0){}
struct HistogramProtoDefaultTypeInternal {
  constexpr HistogramProtoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HistogramProtoDefaultTypeInternal() {}
  union {
    HistogramProto _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HistogramProtoDefaultTypeInternal _HistogramProto_default_instance_;
constexpr SummaryMetadata_PluginData::SummaryMetadata_PluginData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : plugin_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , content_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SummaryMetadata_PluginDataDefaultTypeInternal {
  constexpr SummaryMetadata_PluginDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SummaryMetadata_PluginDataDefaultTypeInternal() {}
  union {
    SummaryMetadata_PluginData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SummaryMetadata_PluginDataDefaultTypeInternal _SummaryMetadata_PluginData_default_instance_;
constexpr SummaryMetadata::SummaryMetadata(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : display_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , summary_description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , plugin_data_(nullptr)
  , data_class_(0)
{}
struct SummaryMetadataDefaultTypeInternal {
  constexpr SummaryMetadataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SummaryMetadataDefaultTypeInternal() {}
  union {
    SummaryMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SummaryMetadataDefaultTypeInternal _SummaryMetadata_default_instance_;
constexpr Summary_Image::Summary_Image(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : encoded_image_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , height_(0)
  , width_(0)
  , colorspace_(0){}
struct Summary_ImageDefaultTypeInternal {
  constexpr Summary_ImageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Summary_ImageDefaultTypeInternal() {}
  union {
    Summary_Image _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Summary_ImageDefaultTypeInternal _Summary_Image_default_instance_;
constexpr Summary_Audio::Summary_Audio(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : encoded_audio_string_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , content_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , num_channels_(int64_t{0})
  , length_frames_(int64_t{0})
  , sample_rate_(0){}
struct Summary_AudioDefaultTypeInternal {
  constexpr Summary_AudioDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Summary_AudioDefaultTypeInternal() {}
  union {
    Summary_Audio _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Summary_AudioDefaultTypeInternal _Summary_Audio_default_instance_;
constexpr Summary_Value::Summary_Value(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tag_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , node_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , metadata_(nullptr)
  , _oneof_case_{}{}
struct Summary_ValueDefaultTypeInternal {
  constexpr Summary_ValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Summary_ValueDefaultTypeInternal() {}
  union {
    Summary_Value _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Summary_ValueDefaultTypeInternal _Summary_Value_default_instance_;
constexpr Summary::Summary(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(){}
struct SummaryDefaultTypeInternal {
  constexpr SummaryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SummaryDefaultTypeInternal() {}
  union {
    Summary _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SummaryDefaultTypeInternal _Summary_default_instance_;
}  // namespace tensorboard
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_summary_2eproto[8];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_summary_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_summary_2eproto = nullptr;

const uint32_t TableStruct_summary_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorboard::SummaryDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorboard::SummaryDescription, type_hint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorboard::HistogramProto, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorboard::HistogramProto, min_),
  PROTOBUF_FIELD_OFFSET(::tensorboard::HistogramProto, max_),
  PROTOBUF_FIELD_OFFSET(::tensorboard::HistogramProto, num_),
  PROTOBUF_FIELD_OFFSET(::tensorboard::HistogramProto, sum_),
  PROTOBUF_FIELD_OFFSET(::tensorboard::HistogramProto, sum_squares_),
  PROTOBUF_FIELD_OFFSET(::tensorboard::HistogramProto, bucket_limit_),
  PROTOBUF_FIELD_OFFSET(::tensorboard::HistogramProto, bucket_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorboard::SummaryMetadata_PluginData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorboard::SummaryMetadata_PluginData, plugin_name_),
  PROTOBUF_FIELD_OFFSET(::tensorboard::SummaryMetadata_PluginData, content_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorboard::SummaryMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorboard::SummaryMetadata, plugin_data_),
  PROTOBUF_FIELD_OFFSET(::tensorboard::SummaryMetadata, display_name_),
  PROTOBUF_FIELD_OFFSET(::tensorboard::SummaryMetadata, summary_description_),
  PROTOBUF_FIELD_OFFSET(::tensorboard::SummaryMetadata, data_class_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorboard::Summary_Image, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorboard::Summary_Image, height_),
  PROTOBUF_FIELD_OFFSET(::tensorboard::Summary_Image, width_),
  PROTOBUF_FIELD_OFFSET(::tensorboard::Summary_Image, colorspace_),
  PROTOBUF_FIELD_OFFSET(::tensorboard::Summary_Image, encoded_image_string_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorboard::Summary_Audio, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorboard::Summary_Audio, sample_rate_),
  PROTOBUF_FIELD_OFFSET(::tensorboard::Summary_Audio, num_channels_),
  PROTOBUF_FIELD_OFFSET(::tensorboard::Summary_Audio, length_frames_),
  PROTOBUF_FIELD_OFFSET(::tensorboard::Summary_Audio, encoded_audio_string_),
  PROTOBUF_FIELD_OFFSET(::tensorboard::Summary_Audio, content_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorboard::Summary_Value, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::tensorboard::Summary_Value, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorboard::Summary_Value, node_name_),
  PROTOBUF_FIELD_OFFSET(::tensorboard::Summary_Value, tag_),
  PROTOBUF_FIELD_OFFSET(::tensorboard::Summary_Value, metadata_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::tensorboard::Summary_Value, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tensorboard::Summary, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tensorboard::Summary, value_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tensorboard::SummaryDescription)},
  { 7, -1, -1, sizeof(::tensorboard::HistogramProto)},
  { 20, -1, -1, sizeof(::tensorboard::SummaryMetadata_PluginData)},
  { 28, -1, -1, sizeof(::tensorboard::SummaryMetadata)},
  { 38, -1, -1, sizeof(::tensorboard::Summary_Image)},
  { 48, -1, -1, sizeof(::tensorboard::Summary_Audio)},
  { 59, -1, -1, sizeof(::tensorboard::Summary_Value)},
  { 75, -1, -1, sizeof(::tensorboard::Summary)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorboard::_SummaryDescription_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorboard::_HistogramProto_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorboard::_SummaryMetadata_PluginData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorboard::_SummaryMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorboard::_Summary_Image_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorboard::_Summary_Audio_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorboard::_Summary_Value_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tensorboard::_Summary_default_instance_),
};

const char descriptor_table_protodef_summary_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rsummary.proto\022\013tensorboard\032\014tensor.pro"
  "to\"\'\n\022SummaryDescription\022\021\n\ttype_hint\030\001 "
  "\001(\t\"\207\001\n\016HistogramProto\022\013\n\003min\030\001 \001(\001\022\013\n\003m"
  "ax\030\002 \001(\001\022\013\n\003num\030\003 \001(\001\022\013\n\003sum\030\004 \001(\001\022\023\n\013su"
  "m_squares\030\005 \001(\001\022\030\n\014bucket_limit\030\006 \003(\001B\002\020"
  "\001\022\022\n\006bucket\030\007 \003(\001B\002\020\001\"\342\001\n\017SummaryMetadat"
  "a\022<\n\013plugin_data\030\001 \001(\0132\'.tensorboard.Sum"
  "maryMetadata.PluginData\022\024\n\014display_name\030"
  "\002 \001(\t\022\033\n\023summary_description\030\003 \001(\t\022*\n\nda"
  "ta_class\030\004 \001(\0162\026.tensorboard.DataClass\0322"
  "\n\nPluginData\022\023\n\013plugin_name\030\001 \001(\t\022\017\n\007con"
  "tent\030\002 \001(\014\"\344\004\n\007Summary\022)\n\005value\030\001 \003(\0132\032."
  "tensorboard.Summary.Value\032X\n\005Image\022\016\n\006he"
  "ight\030\001 \001(\005\022\r\n\005width\030\002 \001(\005\022\022\n\ncolorspace\030"
  "\003 \001(\005\022\034\n\024encoded_image_string\030\004 \001(\014\032}\n\005A"
  "udio\022\023\n\013sample_rate\030\001 \001(\002\022\024\n\014num_channel"
  "s\030\002 \001(\003\022\025\n\rlength_frames\030\003 \001(\003\022\034\n\024encode"
  "d_audio_string\030\004 \001(\014\022\024\n\014content_type\030\005 \001"
  "(\t\032\324\002\n\005Value\022\021\n\tnode_name\030\007 \001(\t\022\013\n\003tag\030\001"
  " \001(\t\022.\n\010metadata\030\t \001(\0132\034.tensorboard.Sum"
  "maryMetadata\022\026\n\014simple_value\030\002 \001(\002H\000\022&\n\034"
  "obsolete_old_style_histogram\030\003 \001(\014H\000\022+\n\005"
  "image\030\004 \001(\0132\032.tensorboard.Summary.ImageH"
  "\000\022,\n\005histo\030\005 \001(\0132\033.tensorboard.Histogram"
  "ProtoH\000\022+\n\005audio\030\006 \001(\0132\032.tensorboard.Sum"
  "mary.AudioH\000\022*\n\006tensor\030\010 \001(\0132\030.tensorboa"
  "rd.TensorProtoH\000B\007\n\005value*o\n\tDataClass\022\026"
  "\n\022DATA_CLASS_UNKNOWN\020\000\022\025\n\021DATA_CLASS_SCA"
  "LAR\020\001\022\025\n\021DATA_CLASS_TENSOR\020\002\022\034\n\030DATA_CLA"
  "SS_BLOB_SEQUENCE\020\003B~\n\030org.tensorflow.fra"
  "meworkB\rSummaryProtosP\001ZNgithub.com/tens"
  "orflow/tensorflow/tensorflow/go/core/fra"
  "mework/summary_go_proto\370\001\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_summary_2eproto_deps[1] = {
  &::descriptor_table_tensor_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_summary_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_summary_2eproto = {
  false, false, 1314, descriptor_table_protodef_summary_2eproto, "summary.proto", 
  &descriptor_table_summary_2eproto_once, descriptor_table_summary_2eproto_deps, 1, 8,
  schemas, file_default_instances, TableStruct_summary_2eproto::offsets,
  file_level_metadata_summary_2eproto, file_level_enum_descriptors_summary_2eproto, file_level_service_descriptors_summary_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_summary_2eproto_getter() {
  return &descriptor_table_summary_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_summary_2eproto(&descriptor_table_summary_2eproto);
namespace tensorboard {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DataClass_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_summary_2eproto);
  return file_level_enum_descriptors_summary_2eproto[0];
}
bool DataClass_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SummaryDescription::_Internal {
 public:
};

SummaryDescription::SummaryDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tensorboard.SummaryDescription)
}
SummaryDescription::SummaryDescription(const SummaryDescription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_hint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    type_hint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type_hint().empty()) {
    type_hint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type_hint(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tensorboard.SummaryDescription)
}

inline void SummaryDescription::SharedCtor() {
type_hint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  type_hint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SummaryDescription::~SummaryDescription() {
  // @@protoc_insertion_point(destructor:tensorboard.SummaryDescription)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SummaryDescription::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  type_hint_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SummaryDescription::ArenaDtor(void* object) {
  SummaryDescription* _this = reinterpret_cast< SummaryDescription* >(object);
  (void)_this;
}
void SummaryDescription::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SummaryDescription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SummaryDescription::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorboard.SummaryDescription)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_hint_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SummaryDescription::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string type_hint = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type_hint();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorboard.SummaryDescription.type_hint"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SummaryDescription::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorboard.SummaryDescription)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string type_hint = 1;
  if (!this->_internal_type_hint().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type_hint().data(), static_cast<int>(this->_internal_type_hint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorboard.SummaryDescription.type_hint");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type_hint(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorboard.SummaryDescription)
  return target;
}

size_t SummaryDescription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorboard.SummaryDescription)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type_hint = 1;
  if (!this->_internal_type_hint().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type_hint());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SummaryDescription::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SummaryDescription::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SummaryDescription::GetClassData() const { return &_class_data_; }

void SummaryDescription::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SummaryDescription *>(to)->MergeFrom(
      static_cast<const SummaryDescription &>(from));
}


void SummaryDescription::MergeFrom(const SummaryDescription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorboard.SummaryDescription)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_type_hint().empty()) {
    _internal_set_type_hint(from._internal_type_hint());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SummaryDescription::CopyFrom(const SummaryDescription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorboard.SummaryDescription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SummaryDescription::IsInitialized() const {
  return true;
}

void SummaryDescription::InternalSwap(SummaryDescription* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &type_hint_, lhs_arena,
      &other->type_hint_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SummaryDescription::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_summary_2eproto_getter, &descriptor_table_summary_2eproto_once,
      file_level_metadata_summary_2eproto[0]);
}

// ===================================================================

class HistogramProto::_Internal {
 public:
};

HistogramProto::HistogramProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  bucket_limit_(arena),
  bucket_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tensorboard.HistogramProto)
}
HistogramProto::HistogramProto(const HistogramProto& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bucket_limit_(from.bucket_limit_),
      bucket_(from.bucket_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&min_, &from.min_,
    static_cast<size_t>(reinterpret_cast<char*>(&sum_squares_) -
    reinterpret_cast<char*>(&min_)) + sizeof(sum_squares_));
  // @@protoc_insertion_point(copy_constructor:tensorboard.HistogramProto)
}

inline void HistogramProto::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&min_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sum_squares_) -
    reinterpret_cast<char*>(&min_)) + sizeof(sum_squares_));
}

HistogramProto::~HistogramProto() {
  // @@protoc_insertion_point(destructor:tensorboard.HistogramProto)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HistogramProto::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HistogramProto::ArenaDtor(void* object) {
  HistogramProto* _this = reinterpret_cast< HistogramProto* >(object);
  (void)_this;
}
void HistogramProto::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HistogramProto::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HistogramProto::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorboard.HistogramProto)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bucket_limit_.Clear();
  bucket_.Clear();
  ::memset(&min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sum_squares_) -
      reinterpret_cast<char*>(&min_)) + sizeof(sum_squares_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HistogramProto::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double min = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          min_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          max_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          num_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double sum = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          sum_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double sum_squares = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          sum_squares_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double bucket_limit = 6 [packed = true];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_bucket_limit(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 49) {
          _internal_add_bucket_limit(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // repeated double bucket = 7 [packed = true];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_bucket(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 57) {
          _internal_add_bucket(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HistogramProto::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorboard.HistogramProto)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double min = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_min = this->_internal_min();
  uint64_t raw_min;
  memcpy(&raw_min, &tmp_min, sizeof(tmp_min));
  if (raw_min != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_min(), target);
  }

  // double max = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max = this->_internal_max();
  uint64_t raw_max;
  memcpy(&raw_max, &tmp_max, sizeof(tmp_max));
  if (raw_max != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_max(), target);
  }

  // double num = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_num = this->_internal_num();
  uint64_t raw_num;
  memcpy(&raw_num, &tmp_num, sizeof(tmp_num));
  if (raw_num != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_num(), target);
  }

  // double sum = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sum = this->_internal_sum();
  uint64_t raw_sum;
  memcpy(&raw_sum, &tmp_sum, sizeof(tmp_sum));
  if (raw_sum != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_sum(), target);
  }

  // double sum_squares = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sum_squares = this->_internal_sum_squares();
  uint64_t raw_sum_squares;
  memcpy(&raw_sum_squares, &tmp_sum_squares, sizeof(tmp_sum_squares));
  if (raw_sum_squares != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_sum_squares(), target);
  }

  // repeated double bucket_limit = 6 [packed = true];
  if (this->_internal_bucket_limit_size() > 0) {
    target = stream->WriteFixedPacked(6, _internal_bucket_limit(), target);
  }

  // repeated double bucket = 7 [packed = true];
  if (this->_internal_bucket_size() > 0) {
    target = stream->WriteFixedPacked(7, _internal_bucket(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorboard.HistogramProto)
  return target;
}

size_t HistogramProto::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorboard.HistogramProto)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double bucket_limit = 6 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_bucket_limit_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // repeated double bucket = 7 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_bucket_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // double min = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_min = this->_internal_min();
  uint64_t raw_min;
  memcpy(&raw_min, &tmp_min, sizeof(tmp_min));
  if (raw_min != 0) {
    total_size += 1 + 8;
  }

  // double max = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max = this->_internal_max();
  uint64_t raw_max;
  memcpy(&raw_max, &tmp_max, sizeof(tmp_max));
  if (raw_max != 0) {
    total_size += 1 + 8;
  }

  // double num = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_num = this->_internal_num();
  uint64_t raw_num;
  memcpy(&raw_num, &tmp_num, sizeof(tmp_num));
  if (raw_num != 0) {
    total_size += 1 + 8;
  }

  // double sum = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sum = this->_internal_sum();
  uint64_t raw_sum;
  memcpy(&raw_sum, &tmp_sum, sizeof(tmp_sum));
  if (raw_sum != 0) {
    total_size += 1 + 8;
  }

  // double sum_squares = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sum_squares = this->_internal_sum_squares();
  uint64_t raw_sum_squares;
  memcpy(&raw_sum_squares, &tmp_sum_squares, sizeof(tmp_sum_squares));
  if (raw_sum_squares != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HistogramProto::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HistogramProto::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HistogramProto::GetClassData() const { return &_class_data_; }

void HistogramProto::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HistogramProto *>(to)->MergeFrom(
      static_cast<const HistogramProto &>(from));
}


void HistogramProto::MergeFrom(const HistogramProto& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorboard.HistogramProto)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  bucket_limit_.MergeFrom(from.bucket_limit_);
  bucket_.MergeFrom(from.bucket_);
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_min = from._internal_min();
  uint64_t raw_min;
  memcpy(&raw_min, &tmp_min, sizeof(tmp_min));
  if (raw_min != 0) {
    _internal_set_min(from._internal_min());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_max = from._internal_max();
  uint64_t raw_max;
  memcpy(&raw_max, &tmp_max, sizeof(tmp_max));
  if (raw_max != 0) {
    _internal_set_max(from._internal_max());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_num = from._internal_num();
  uint64_t raw_num;
  memcpy(&raw_num, &tmp_num, sizeof(tmp_num));
  if (raw_num != 0) {
    _internal_set_num(from._internal_num());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sum = from._internal_sum();
  uint64_t raw_sum;
  memcpy(&raw_sum, &tmp_sum, sizeof(tmp_sum));
  if (raw_sum != 0) {
    _internal_set_sum(from._internal_sum());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_sum_squares = from._internal_sum_squares();
  uint64_t raw_sum_squares;
  memcpy(&raw_sum_squares, &tmp_sum_squares, sizeof(tmp_sum_squares));
  if (raw_sum_squares != 0) {
    _internal_set_sum_squares(from._internal_sum_squares());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HistogramProto::CopyFrom(const HistogramProto& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorboard.HistogramProto)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HistogramProto::IsInitialized() const {
  return true;
}

void HistogramProto::InternalSwap(HistogramProto* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  bucket_limit_.InternalSwap(&other->bucket_limit_);
  bucket_.InternalSwap(&other->bucket_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HistogramProto, sum_squares_)
      + sizeof(HistogramProto::sum_squares_)
      - PROTOBUF_FIELD_OFFSET(HistogramProto, min_)>(
          reinterpret_cast<char*>(&min_),
          reinterpret_cast<char*>(&other->min_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HistogramProto::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_summary_2eproto_getter, &descriptor_table_summary_2eproto_once,
      file_level_metadata_summary_2eproto[1]);
}

// ===================================================================

class SummaryMetadata_PluginData::_Internal {
 public:
};

SummaryMetadata_PluginData::SummaryMetadata_PluginData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tensorboard.SummaryMetadata.PluginData)
}
SummaryMetadata_PluginData::SummaryMetadata_PluginData(const SummaryMetadata_PluginData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  plugin_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    plugin_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_plugin_name().empty()) {
    plugin_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_plugin_name(), 
      GetArenaForAllocation());
  }
  content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content().empty()) {
    content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_content(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:tensorboard.SummaryMetadata.PluginData)
}

inline void SummaryMetadata_PluginData::SharedCtor() {
plugin_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  plugin_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
content_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SummaryMetadata_PluginData::~SummaryMetadata_PluginData() {
  // @@protoc_insertion_point(destructor:tensorboard.SummaryMetadata.PluginData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SummaryMetadata_PluginData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  plugin_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SummaryMetadata_PluginData::ArenaDtor(void* object) {
  SummaryMetadata_PluginData* _this = reinterpret_cast< SummaryMetadata_PluginData* >(object);
  (void)_this;
}
void SummaryMetadata_PluginData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SummaryMetadata_PluginData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SummaryMetadata_PluginData::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorboard.SummaryMetadata.PluginData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  plugin_name_.ClearToEmpty();
  content_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SummaryMetadata_PluginData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string plugin_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_plugin_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorboard.SummaryMetadata.PluginData.plugin_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes content = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_content();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SummaryMetadata_PluginData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorboard.SummaryMetadata.PluginData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string plugin_name = 1;
  if (!this->_internal_plugin_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_plugin_name().data(), static_cast<int>(this->_internal_plugin_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorboard.SummaryMetadata.PluginData.plugin_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_plugin_name(), target);
  }

  // bytes content = 2;
  if (!this->_internal_content().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_content(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorboard.SummaryMetadata.PluginData)
  return target;
}

size_t SummaryMetadata_PluginData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorboard.SummaryMetadata.PluginData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string plugin_name = 1;
  if (!this->_internal_plugin_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_plugin_name());
  }

  // bytes content = 2;
  if (!this->_internal_content().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_content());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SummaryMetadata_PluginData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SummaryMetadata_PluginData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SummaryMetadata_PluginData::GetClassData() const { return &_class_data_; }

void SummaryMetadata_PluginData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SummaryMetadata_PluginData *>(to)->MergeFrom(
      static_cast<const SummaryMetadata_PluginData &>(from));
}


void SummaryMetadata_PluginData::MergeFrom(const SummaryMetadata_PluginData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorboard.SummaryMetadata.PluginData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_plugin_name().empty()) {
    _internal_set_plugin_name(from._internal_plugin_name());
  }
  if (!from._internal_content().empty()) {
    _internal_set_content(from._internal_content());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SummaryMetadata_PluginData::CopyFrom(const SummaryMetadata_PluginData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorboard.SummaryMetadata.PluginData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SummaryMetadata_PluginData::IsInitialized() const {
  return true;
}

void SummaryMetadata_PluginData::InternalSwap(SummaryMetadata_PluginData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &plugin_name_, lhs_arena,
      &other->plugin_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &content_, lhs_arena,
      &other->content_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SummaryMetadata_PluginData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_summary_2eproto_getter, &descriptor_table_summary_2eproto_once,
      file_level_metadata_summary_2eproto[2]);
}

// ===================================================================

class SummaryMetadata::_Internal {
 public:
  static const ::tensorboard::SummaryMetadata_PluginData& plugin_data(const SummaryMetadata* msg);
};

const ::tensorboard::SummaryMetadata_PluginData&
SummaryMetadata::_Internal::plugin_data(const SummaryMetadata* msg) {
  return *msg->plugin_data_;
}
SummaryMetadata::SummaryMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tensorboard.SummaryMetadata)
}
SummaryMetadata::SummaryMetadata(const SummaryMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    display_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_display_name().empty()) {
    display_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_display_name(), 
      GetArenaForAllocation());
  }
  summary_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    summary_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_summary_description().empty()) {
    summary_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_summary_description(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_plugin_data()) {
    plugin_data_ = new ::tensorboard::SummaryMetadata_PluginData(*from.plugin_data_);
  } else {
    plugin_data_ = nullptr;
  }
  data_class_ = from.data_class_;
  // @@protoc_insertion_point(copy_constructor:tensorboard.SummaryMetadata)
}

inline void SummaryMetadata::SharedCtor() {
display_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  display_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
summary_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  summary_description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&plugin_data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&data_class_) -
    reinterpret_cast<char*>(&plugin_data_)) + sizeof(data_class_));
}

SummaryMetadata::~SummaryMetadata() {
  // @@protoc_insertion_point(destructor:tensorboard.SummaryMetadata)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SummaryMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  display_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  summary_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete plugin_data_;
}

void SummaryMetadata::ArenaDtor(void* object) {
  SummaryMetadata* _this = reinterpret_cast< SummaryMetadata* >(object);
  (void)_this;
}
void SummaryMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SummaryMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SummaryMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorboard.SummaryMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  display_name_.ClearToEmpty();
  summary_description_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && plugin_data_ != nullptr) {
    delete plugin_data_;
  }
  plugin_data_ = nullptr;
  data_class_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SummaryMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .tensorboard.SummaryMetadata.PluginData plugin_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_plugin_data(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string display_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_display_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorboard.SummaryMetadata.display_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string summary_description = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_summary_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorboard.SummaryMetadata.summary_description"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorboard.DataClass data_class = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_data_class(static_cast<::tensorboard::DataClass>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SummaryMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorboard.SummaryMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .tensorboard.SummaryMetadata.PluginData plugin_data = 1;
  if (this->_internal_has_plugin_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::plugin_data(this), target, stream);
  }

  // string display_name = 2;
  if (!this->_internal_display_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_display_name().data(), static_cast<int>(this->_internal_display_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorboard.SummaryMetadata.display_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_display_name(), target);
  }

  // string summary_description = 3;
  if (!this->_internal_summary_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_summary_description().data(), static_cast<int>(this->_internal_summary_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorboard.SummaryMetadata.summary_description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_summary_description(), target);
  }

  // .tensorboard.DataClass data_class = 4;
  if (this->_internal_data_class() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_data_class(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorboard.SummaryMetadata)
  return target;
}

size_t SummaryMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorboard.SummaryMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string display_name = 2;
  if (!this->_internal_display_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_display_name());
  }

  // string summary_description = 3;
  if (!this->_internal_summary_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_summary_description());
  }

  // .tensorboard.SummaryMetadata.PluginData plugin_data = 1;
  if (this->_internal_has_plugin_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *plugin_data_);
  }

  // .tensorboard.DataClass data_class = 4;
  if (this->_internal_data_class() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_data_class());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SummaryMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SummaryMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SummaryMetadata::GetClassData() const { return &_class_data_; }

void SummaryMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SummaryMetadata *>(to)->MergeFrom(
      static_cast<const SummaryMetadata &>(from));
}


void SummaryMetadata::MergeFrom(const SummaryMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorboard.SummaryMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_display_name().empty()) {
    _internal_set_display_name(from._internal_display_name());
  }
  if (!from._internal_summary_description().empty()) {
    _internal_set_summary_description(from._internal_summary_description());
  }
  if (from._internal_has_plugin_data()) {
    _internal_mutable_plugin_data()->::tensorboard::SummaryMetadata_PluginData::MergeFrom(from._internal_plugin_data());
  }
  if (from._internal_data_class() != 0) {
    _internal_set_data_class(from._internal_data_class());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SummaryMetadata::CopyFrom(const SummaryMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorboard.SummaryMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SummaryMetadata::IsInitialized() const {
  return true;
}

void SummaryMetadata::InternalSwap(SummaryMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &display_name_, lhs_arena,
      &other->display_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &summary_description_, lhs_arena,
      &other->summary_description_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SummaryMetadata, data_class_)
      + sizeof(SummaryMetadata::data_class_)
      - PROTOBUF_FIELD_OFFSET(SummaryMetadata, plugin_data_)>(
          reinterpret_cast<char*>(&plugin_data_),
          reinterpret_cast<char*>(&other->plugin_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SummaryMetadata::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_summary_2eproto_getter, &descriptor_table_summary_2eproto_once,
      file_level_metadata_summary_2eproto[3]);
}

// ===================================================================

class Summary_Image::_Internal {
 public:
};

Summary_Image::Summary_Image(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tensorboard.Summary.Image)
}
Summary_Image::Summary_Image(const Summary_Image& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  encoded_image_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    encoded_image_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_encoded_image_string().empty()) {
    encoded_image_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_encoded_image_string(), 
      GetArenaForAllocation());
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&colorspace_) -
    reinterpret_cast<char*>(&height_)) + sizeof(colorspace_));
  // @@protoc_insertion_point(copy_constructor:tensorboard.Summary.Image)
}

inline void Summary_Image::SharedCtor() {
encoded_image_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  encoded_image_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&height_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&colorspace_) -
    reinterpret_cast<char*>(&height_)) + sizeof(colorspace_));
}

Summary_Image::~Summary_Image() {
  // @@protoc_insertion_point(destructor:tensorboard.Summary.Image)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Summary_Image::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  encoded_image_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Summary_Image::ArenaDtor(void* object) {
  Summary_Image* _this = reinterpret_cast< Summary_Image* >(object);
  (void)_this;
}
void Summary_Image::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Summary_Image::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Summary_Image::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorboard.Summary.Image)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  encoded_image_string_.ClearToEmpty();
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&colorspace_) -
      reinterpret_cast<char*>(&height_)) + sizeof(colorspace_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Summary_Image::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 colorspace = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          colorspace_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes encoded_image_string = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_encoded_image_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Summary_Image::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorboard.Summary.Image)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 height = 1;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_height(), target);
  }

  // int32 width = 2;
  if (this->_internal_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_width(), target);
  }

  // int32 colorspace = 3;
  if (this->_internal_colorspace() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_colorspace(), target);
  }

  // bytes encoded_image_string = 4;
  if (!this->_internal_encoded_image_string().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_encoded_image_string(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorboard.Summary.Image)
  return target;
}

size_t Summary_Image::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorboard.Summary.Image)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes encoded_image_string = 4;
  if (!this->_internal_encoded_image_string().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_encoded_image_string());
  }

  // int32 height = 1;
  if (this->_internal_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_height());
  }

  // int32 width = 2;
  if (this->_internal_width() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_width());
  }

  // int32 colorspace = 3;
  if (this->_internal_colorspace() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_colorspace());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Summary_Image::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Summary_Image::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Summary_Image::GetClassData() const { return &_class_data_; }

void Summary_Image::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Summary_Image *>(to)->MergeFrom(
      static_cast<const Summary_Image &>(from));
}


void Summary_Image::MergeFrom(const Summary_Image& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorboard.Summary.Image)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_encoded_image_string().empty()) {
    _internal_set_encoded_image_string(from._internal_encoded_image_string());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from._internal_width() != 0) {
    _internal_set_width(from._internal_width());
  }
  if (from._internal_colorspace() != 0) {
    _internal_set_colorspace(from._internal_colorspace());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Summary_Image::CopyFrom(const Summary_Image& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorboard.Summary.Image)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Summary_Image::IsInitialized() const {
  return true;
}

void Summary_Image::InternalSwap(Summary_Image* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &encoded_image_string_, lhs_arena,
      &other->encoded_image_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Summary_Image, colorspace_)
      + sizeof(Summary_Image::colorspace_)
      - PROTOBUF_FIELD_OFFSET(Summary_Image, height_)>(
          reinterpret_cast<char*>(&height_),
          reinterpret_cast<char*>(&other->height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Summary_Image::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_summary_2eproto_getter, &descriptor_table_summary_2eproto_once,
      file_level_metadata_summary_2eproto[4]);
}

// ===================================================================

class Summary_Audio::_Internal {
 public:
};

Summary_Audio::Summary_Audio(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tensorboard.Summary.Audio)
}
Summary_Audio::Summary_Audio(const Summary_Audio& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  encoded_audio_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    encoded_audio_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_encoded_audio_string().empty()) {
    encoded_audio_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_encoded_audio_string(), 
      GetArenaForAllocation());
  }
  content_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    content_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_content_type().empty()) {
    content_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_content_type(), 
      GetArenaForAllocation());
  }
  ::memcpy(&num_channels_, &from.num_channels_,
    static_cast<size_t>(reinterpret_cast<char*>(&sample_rate_) -
    reinterpret_cast<char*>(&num_channels_)) + sizeof(sample_rate_));
  // @@protoc_insertion_point(copy_constructor:tensorboard.Summary.Audio)
}

inline void Summary_Audio::SharedCtor() {
encoded_audio_string_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  encoded_audio_string_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
content_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  content_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&num_channels_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sample_rate_) -
    reinterpret_cast<char*>(&num_channels_)) + sizeof(sample_rate_));
}

Summary_Audio::~Summary_Audio() {
  // @@protoc_insertion_point(destructor:tensorboard.Summary.Audio)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Summary_Audio::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  encoded_audio_string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  content_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Summary_Audio::ArenaDtor(void* object) {
  Summary_Audio* _this = reinterpret_cast< Summary_Audio* >(object);
  (void)_this;
}
void Summary_Audio::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Summary_Audio::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Summary_Audio::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorboard.Summary.Audio)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  encoded_audio_string_.ClearToEmpty();
  content_type_.ClearToEmpty();
  ::memset(&num_channels_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sample_rate_) -
      reinterpret_cast<char*>(&num_channels_)) + sizeof(sample_rate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Summary_Audio::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float sample_rate = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          sample_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // int64 num_channels = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          num_channels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 length_frames = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          length_frames_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes encoded_audio_string = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_encoded_audio_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string content_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_content_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorboard.Summary.Audio.content_type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Summary_Audio::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorboard.Summary.Audio)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // float sample_rate = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_sample_rate = this->_internal_sample_rate();
  uint32_t raw_sample_rate;
  memcpy(&raw_sample_rate, &tmp_sample_rate, sizeof(tmp_sample_rate));
  if (raw_sample_rate != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_sample_rate(), target);
  }

  // int64 num_channels = 2;
  if (this->_internal_num_channels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_num_channels(), target);
  }

  // int64 length_frames = 3;
  if (this->_internal_length_frames() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_length_frames(), target);
  }

  // bytes encoded_audio_string = 4;
  if (!this->_internal_encoded_audio_string().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_encoded_audio_string(), target);
  }

  // string content_type = 5;
  if (!this->_internal_content_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_content_type().data(), static_cast<int>(this->_internal_content_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorboard.Summary.Audio.content_type");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_content_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorboard.Summary.Audio)
  return target;
}

size_t Summary_Audio::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorboard.Summary.Audio)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes encoded_audio_string = 4;
  if (!this->_internal_encoded_audio_string().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_encoded_audio_string());
  }

  // string content_type = 5;
  if (!this->_internal_content_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_content_type());
  }

  // int64 num_channels = 2;
  if (this->_internal_num_channels() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_num_channels());
  }

  // int64 length_frames = 3;
  if (this->_internal_length_frames() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_length_frames());
  }

  // float sample_rate = 1;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_sample_rate = this->_internal_sample_rate();
  uint32_t raw_sample_rate;
  memcpy(&raw_sample_rate, &tmp_sample_rate, sizeof(tmp_sample_rate));
  if (raw_sample_rate != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Summary_Audio::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Summary_Audio::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Summary_Audio::GetClassData() const { return &_class_data_; }

void Summary_Audio::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Summary_Audio *>(to)->MergeFrom(
      static_cast<const Summary_Audio &>(from));
}


void Summary_Audio::MergeFrom(const Summary_Audio& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorboard.Summary.Audio)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_encoded_audio_string().empty()) {
    _internal_set_encoded_audio_string(from._internal_encoded_audio_string());
  }
  if (!from._internal_content_type().empty()) {
    _internal_set_content_type(from._internal_content_type());
  }
  if (from._internal_num_channels() != 0) {
    _internal_set_num_channels(from._internal_num_channels());
  }
  if (from._internal_length_frames() != 0) {
    _internal_set_length_frames(from._internal_length_frames());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_sample_rate = from._internal_sample_rate();
  uint32_t raw_sample_rate;
  memcpy(&raw_sample_rate, &tmp_sample_rate, sizeof(tmp_sample_rate));
  if (raw_sample_rate != 0) {
    _internal_set_sample_rate(from._internal_sample_rate());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Summary_Audio::CopyFrom(const Summary_Audio& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorboard.Summary.Audio)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Summary_Audio::IsInitialized() const {
  return true;
}

void Summary_Audio::InternalSwap(Summary_Audio* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &encoded_audio_string_, lhs_arena,
      &other->encoded_audio_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &content_type_, lhs_arena,
      &other->content_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Summary_Audio, sample_rate_)
      + sizeof(Summary_Audio::sample_rate_)
      - PROTOBUF_FIELD_OFFSET(Summary_Audio, num_channels_)>(
          reinterpret_cast<char*>(&num_channels_),
          reinterpret_cast<char*>(&other->num_channels_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Summary_Audio::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_summary_2eproto_getter, &descriptor_table_summary_2eproto_once,
      file_level_metadata_summary_2eproto[5]);
}

// ===================================================================

class Summary_Value::_Internal {
 public:
  static const ::tensorboard::SummaryMetadata& metadata(const Summary_Value* msg);
  static const ::tensorboard::Summary_Image& image(const Summary_Value* msg);
  static const ::tensorboard::HistogramProto& histo(const Summary_Value* msg);
  static const ::tensorboard::Summary_Audio& audio(const Summary_Value* msg);
  static const ::tensorboard::TensorProto& tensor(const Summary_Value* msg);
};

const ::tensorboard::SummaryMetadata&
Summary_Value::_Internal::metadata(const Summary_Value* msg) {
  return *msg->metadata_;
}
const ::tensorboard::Summary_Image&
Summary_Value::_Internal::image(const Summary_Value* msg) {
  return *msg->value_.image_;
}
const ::tensorboard::HistogramProto&
Summary_Value::_Internal::histo(const Summary_Value* msg) {
  return *msg->value_.histo_;
}
const ::tensorboard::Summary_Audio&
Summary_Value::_Internal::audio(const Summary_Value* msg) {
  return *msg->value_.audio_;
}
const ::tensorboard::TensorProto&
Summary_Value::_Internal::tensor(const Summary_Value* msg) {
  return *msg->value_.tensor_;
}
void Summary_Value::set_allocated_image(::tensorboard::Summary_Image* image) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (image) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tensorboard::Summary_Image>::GetOwningArena(image);
    if (message_arena != submessage_arena) {
      image = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image, submessage_arena);
    }
    set_has_image();
    value_.image_ = image;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorboard.Summary.Value.image)
}
void Summary_Value::set_allocated_histo(::tensorboard::HistogramProto* histo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (histo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tensorboard::HistogramProto>::GetOwningArena(histo);
    if (message_arena != submessage_arena) {
      histo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, histo, submessage_arena);
    }
    set_has_histo();
    value_.histo_ = histo;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorboard.Summary.Value.histo)
}
void Summary_Value::set_allocated_audio(::tensorboard::Summary_Audio* audio) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (audio) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::tensorboard::Summary_Audio>::GetOwningArena(audio);
    if (message_arena != submessage_arena) {
      audio = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, audio, submessage_arena);
    }
    set_has_audio();
    value_.audio_ = audio;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorboard.Summary.Value.audio)
}
void Summary_Value::set_allocated_tensor(::tensorboard::TensorProto* tensor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_value();
  if (tensor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tensor));
    if (message_arena != submessage_arena) {
      tensor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tensor, submessage_arena);
    }
    set_has_tensor();
    value_.tensor_ = tensor;
  }
  // @@protoc_insertion_point(field_set_allocated:tensorboard.Summary.Value.tensor)
}
void Summary_Value::clear_tensor() {
  if (_internal_has_tensor()) {
    if (GetArenaForAllocation() == nullptr) {
      delete value_.tensor_;
    }
    clear_has_value();
  }
}
Summary_Value::Summary_Value(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tensorboard.Summary.Value)
}
Summary_Value::Summary_Value(const Summary_Value& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_tag().empty()) {
    tag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tag(), 
      GetArenaForAllocation());
  }
  node_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    node_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_node_name().empty()) {
    node_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_node_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_metadata()) {
    metadata_ = new ::tensorboard::SummaryMetadata(*from.metadata_);
  } else {
    metadata_ = nullptr;
  }
  clear_has_value();
  switch (from.value_case()) {
    case kSimpleValue: {
      _internal_set_simple_value(from._internal_simple_value());
      break;
    }
    case kObsoleteOldStyleHistogram: {
      _internal_set_obsolete_old_style_histogram(from._internal_obsolete_old_style_histogram());
      break;
    }
    case kImage: {
      _internal_mutable_image()->::tensorboard::Summary_Image::MergeFrom(from._internal_image());
      break;
    }
    case kHisto: {
      _internal_mutable_histo()->::tensorboard::HistogramProto::MergeFrom(from._internal_histo());
      break;
    }
    case kAudio: {
      _internal_mutable_audio()->::tensorboard::Summary_Audio::MergeFrom(from._internal_audio());
      break;
    }
    case kTensor: {
      _internal_mutable_tensor()->::tensorboard::TensorProto::MergeFrom(from._internal_tensor());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:tensorboard.Summary.Value)
}

inline void Summary_Value::SharedCtor() {
tag_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  tag_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
node_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  node_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
metadata_ = nullptr;
clear_has_value();
}

Summary_Value::~Summary_Value() {
  // @@protoc_insertion_point(destructor:tensorboard.Summary.Value)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Summary_Value::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  tag_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  node_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete metadata_;
  if (has_value()) {
    clear_value();
  }
}

void Summary_Value::ArenaDtor(void* object) {
  Summary_Value* _this = reinterpret_cast< Summary_Value* >(object);
  (void)_this;
}
void Summary_Value::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Summary_Value::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Summary_Value::clear_value() {
// @@protoc_insertion_point(one_of_clear_start:tensorboard.Summary.Value)
  switch (value_case()) {
    case kSimpleValue: {
      // No need to clear
      break;
    }
    case kObsoleteOldStyleHistogram: {
      value_.obsolete_old_style_histogram_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
      break;
    }
    case kImage: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.image_;
      }
      break;
    }
    case kHisto: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.histo_;
      }
      break;
    }
    case kAudio: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.audio_;
      }
      break;
    }
    case kTensor: {
      if (GetArenaForAllocation() == nullptr) {
        delete value_.tensor_;
      }
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = VALUE_NOT_SET;
}


void Summary_Value::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorboard.Summary.Value)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tag_.ClearToEmpty();
  node_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && metadata_ != nullptr) {
    delete metadata_;
  }
  metadata_ = nullptr;
  clear_value();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Summary_Value::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_tag();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorboard.Summary.Value.tag"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float simple_value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          _internal_set_simple_value(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bytes obsolete_old_style_histogram = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_obsolete_old_style_histogram();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorboard.Summary.Image image = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_image(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorboard.HistogramProto histo = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_histo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorboard.Summary.Audio audio = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_audio(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string node_name = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          auto str = _internal_mutable_node_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "tensorboard.Summary.Value.node_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorboard.TensorProto tensor = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_tensor(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .tensorboard.SummaryMetadata metadata = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Summary_Value::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorboard.Summary.Value)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string tag = 1;
  if (!this->_internal_tag().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tag().data(), static_cast<int>(this->_internal_tag().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorboard.Summary.Value.tag");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tag(), target);
  }

  // float simple_value = 2;
  if (_internal_has_simple_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_simple_value(), target);
  }

  // bytes obsolete_old_style_histogram = 3;
  if (_internal_has_obsolete_old_style_histogram()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_obsolete_old_style_histogram(), target);
  }

  // .tensorboard.Summary.Image image = 4;
  if (_internal_has_image()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::image(this), target, stream);
  }

  // .tensorboard.HistogramProto histo = 5;
  if (_internal_has_histo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::histo(this), target, stream);
  }

  // .tensorboard.Summary.Audio audio = 6;
  if (_internal_has_audio()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::audio(this), target, stream);
  }

  // string node_name = 7;
  if (!this->_internal_node_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_name().data(), static_cast<int>(this->_internal_node_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "tensorboard.Summary.Value.node_name");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_node_name(), target);
  }

  // .tensorboard.TensorProto tensor = 8;
  if (_internal_has_tensor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::tensor(this), target, stream);
  }

  // .tensorboard.SummaryMetadata metadata = 9;
  if (this->_internal_has_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::metadata(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorboard.Summary.Value)
  return target;
}

size_t Summary_Value::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorboard.Summary.Value)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string tag = 1;
  if (!this->_internal_tag().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag());
  }

  // string node_name = 7;
  if (!this->_internal_node_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_name());
  }

  // .tensorboard.SummaryMetadata metadata = 9;
  if (this->_internal_has_metadata()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metadata_);
  }

  switch (value_case()) {
    // float simple_value = 2;
    case kSimpleValue: {
      total_size += 1 + 4;
      break;
    }
    // bytes obsolete_old_style_histogram = 3;
    case kObsoleteOldStyleHistogram: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
          this->_internal_obsolete_old_style_histogram());
      break;
    }
    // .tensorboard.Summary.Image image = 4;
    case kImage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.image_);
      break;
    }
    // .tensorboard.HistogramProto histo = 5;
    case kHisto: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.histo_);
      break;
    }
    // .tensorboard.Summary.Audio audio = 6;
    case kAudio: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.audio_);
      break;
    }
    // .tensorboard.TensorProto tensor = 8;
    case kTensor: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *value_.tensor_);
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Summary_Value::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Summary_Value::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Summary_Value::GetClassData() const { return &_class_data_; }

void Summary_Value::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Summary_Value *>(to)->MergeFrom(
      static_cast<const Summary_Value &>(from));
}


void Summary_Value::MergeFrom(const Summary_Value& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorboard.Summary.Value)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_tag().empty()) {
    _internal_set_tag(from._internal_tag());
  }
  if (!from._internal_node_name().empty()) {
    _internal_set_node_name(from._internal_node_name());
  }
  if (from._internal_has_metadata()) {
    _internal_mutable_metadata()->::tensorboard::SummaryMetadata::MergeFrom(from._internal_metadata());
  }
  switch (from.value_case()) {
    case kSimpleValue: {
      _internal_set_simple_value(from._internal_simple_value());
      break;
    }
    case kObsoleteOldStyleHistogram: {
      _internal_set_obsolete_old_style_histogram(from._internal_obsolete_old_style_histogram());
      break;
    }
    case kImage: {
      _internal_mutable_image()->::tensorboard::Summary_Image::MergeFrom(from._internal_image());
      break;
    }
    case kHisto: {
      _internal_mutable_histo()->::tensorboard::HistogramProto::MergeFrom(from._internal_histo());
      break;
    }
    case kAudio: {
      _internal_mutable_audio()->::tensorboard::Summary_Audio::MergeFrom(from._internal_audio());
      break;
    }
    case kTensor: {
      _internal_mutable_tensor()->::tensorboard::TensorProto::MergeFrom(from._internal_tensor());
      break;
    }
    case VALUE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Summary_Value::CopyFrom(const Summary_Value& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorboard.Summary.Value)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Summary_Value::IsInitialized() const {
  return true;
}

void Summary_Value::InternalSwap(Summary_Value* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tag_, lhs_arena,
      &other->tag_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &node_name_, lhs_arena,
      &other->node_name_, rhs_arena
  );
  swap(metadata_, other->metadata_);
  swap(value_, other->value_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Summary_Value::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_summary_2eproto_getter, &descriptor_table_summary_2eproto_once,
      file_level_metadata_summary_2eproto[6]);
}

// ===================================================================

class Summary::_Internal {
 public:
};

Summary::Summary(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  value_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tensorboard.Summary)
}
Summary::Summary(const Summary& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      value_(from.value_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:tensorboard.Summary)
}

inline void Summary::SharedCtor() {
}

Summary::~Summary() {
  // @@protoc_insertion_point(destructor:tensorboard.Summary)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Summary::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Summary::ArenaDtor(void* object) {
  Summary* _this = reinterpret_cast< Summary* >(object);
  (void)_this;
}
void Summary::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Summary::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Summary::Clear() {
// @@protoc_insertion_point(message_clear_start:tensorboard.Summary)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Summary::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .tensorboard.Summary.Value value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_value(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Summary::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tensorboard.Summary)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .tensorboard.Summary.Value value = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_value_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_value(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tensorboard.Summary)
  return target;
}

size_t Summary::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tensorboard.Summary)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .tensorboard.Summary.Value value = 1;
  total_size += 1UL * this->_internal_value_size();
  for (const auto& msg : this->value_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Summary::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Summary::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Summary::GetClassData() const { return &_class_data_; }

void Summary::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Summary *>(to)->MergeFrom(
      static_cast<const Summary &>(from));
}


void Summary::MergeFrom(const Summary& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tensorboard.Summary)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  value_.MergeFrom(from.value_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Summary::CopyFrom(const Summary& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tensorboard.Summary)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Summary::IsInitialized() const {
  return true;
}

void Summary::InternalSwap(Summary* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  value_.InternalSwap(&other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Summary::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_summary_2eproto_getter, &descriptor_table_summary_2eproto_once,
      file_level_metadata_summary_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace tensorboard
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tensorboard::SummaryDescription* Arena::CreateMaybeMessage< ::tensorboard::SummaryDescription >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorboard::SummaryDescription >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorboard::HistogramProto* Arena::CreateMaybeMessage< ::tensorboard::HistogramProto >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorboard::HistogramProto >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorboard::SummaryMetadata_PluginData* Arena::CreateMaybeMessage< ::tensorboard::SummaryMetadata_PluginData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorboard::SummaryMetadata_PluginData >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorboard::SummaryMetadata* Arena::CreateMaybeMessage< ::tensorboard::SummaryMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorboard::SummaryMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorboard::Summary_Image* Arena::CreateMaybeMessage< ::tensorboard::Summary_Image >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorboard::Summary_Image >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorboard::Summary_Audio* Arena::CreateMaybeMessage< ::tensorboard::Summary_Audio >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorboard::Summary_Audio >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorboard::Summary_Value* Arena::CreateMaybeMessage< ::tensorboard::Summary_Value >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorboard::Summary_Value >(arena);
}
template<> PROTOBUF_NOINLINE ::tensorboard::Summary* Arena::CreateMaybeMessage< ::tensorboard::Summary >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tensorboard::Summary >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
